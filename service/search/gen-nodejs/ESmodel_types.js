//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var ESTypeEnum_ttypes = require('./ESTypeEnum_types')


var ttypes = module.exports = {};
TQueryModel = module.exports.TQueryModel = function(args) {
  this.a_from = null;
  this.a_to = null;
  this.pageSize = 100;
  this.pageNum = 0;
  this.queryString = null;
  this.userId = null;
  this.type = null;
  this.database = 'aleiye';
  this.isHighlighter = true;
  this.indecies = null;
  this.includeLower = false;
  this.includeUpper = true;
  this.isProcessTime = false;
  this.timeIsAsc = false;
  if (args) {
    if (args.a_from !== undefined && args.a_from !== null) {
      this.a_from = args.a_from;
    }
    if (args.a_to !== undefined && args.a_to !== null) {
      this.a_to = args.a_to;
    }
    if (args.pageSize !== undefined && args.pageSize !== null) {
      this.pageSize = args.pageSize;
    }
    if (args.pageNum !== undefined && args.pageNum !== null) {
      this.pageNum = args.pageNum;
    }
    if (args.queryString !== undefined && args.queryString !== null) {
      this.queryString = args.queryString;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = Thrift.copyList(args.type, [null]);
    }
    if (args.database !== undefined && args.database !== null) {
      this.database = args.database;
    }
    if (args.isHighlighter !== undefined && args.isHighlighter !== null) {
      this.isHighlighter = args.isHighlighter;
    }
    if (args.indecies !== undefined && args.indecies !== null) {
      this.indecies = Thrift.copyList(args.indecies, [null]);
    }
    if (args.includeLower !== undefined && args.includeLower !== null) {
      this.includeLower = args.includeLower;
    }
    if (args.includeUpper !== undefined && args.includeUpper !== null) {
      this.includeUpper = args.includeUpper;
    }
    if (args.isProcessTime !== undefined && args.isProcessTime !== null) {
      this.isProcessTime = args.isProcessTime;
    }
    if (args.timeIsAsc !== undefined && args.timeIsAsc !== null) {
      this.timeIsAsc = args.timeIsAsc;
    }
  }
};
TQueryModel.prototype = {};
TQueryModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.a_from = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.a_to = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.pageNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.queryString = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.SET) {
        var _size0 = 0;
        var _rtmp34;
        this.type = [];
        var _etype3 = 0;
        _rtmp34 = input.readSetBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.type.push(elem6);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.database = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.isHighlighter = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.indecies = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString();
          this.indecies.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLower = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.includeUpper = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.isProcessTime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.timeIsAsc = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TQueryModel.prototype.write = function(output) {
  output.writeStructBegin('TQueryModel');
  if (this.a_from !== null && this.a_from !== undefined) {
    output.writeFieldBegin('a_from', Thrift.Type.I64, 1);
    output.writeI64(this.a_from);
    output.writeFieldEnd();
  }
  if (this.a_to !== null && this.a_to !== undefined) {
    output.writeFieldBegin('a_to', Thrift.Type.I64, 2);
    output.writeI64(this.a_to);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 3);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  if (this.pageNum !== null && this.pageNum !== undefined) {
    output.writeFieldBegin('pageNum', Thrift.Type.I32, 4);
    output.writeI32(this.pageNum);
    output.writeFieldEnd();
  }
  if (this.queryString !== null && this.queryString !== undefined) {
    output.writeFieldBegin('queryString', Thrift.Type.STRING, 5);
    output.writeString(this.queryString);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 6);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.SET, 7);
    output.writeSetBegin(Thrift.Type.STRING, this.type.length);
    for (var iter14 in this.type)
    {
      if (this.type.hasOwnProperty(iter14))
      {
        iter14 = this.type[iter14];
        output.writeString(iter14);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRING, 8);
    output.writeString(this.database);
    output.writeFieldEnd();
  }
  if (this.isHighlighter !== null && this.isHighlighter !== undefined) {
    output.writeFieldBegin('isHighlighter', Thrift.Type.BOOL, 9);
    output.writeBool(this.isHighlighter);
    output.writeFieldEnd();
  }
  if (this.indecies !== null && this.indecies !== undefined) {
    output.writeFieldBegin('indecies', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.indecies.length);
    for (var iter15 in this.indecies)
    {
      if (this.indecies.hasOwnProperty(iter15))
      {
        iter15 = this.indecies[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.includeLower !== null && this.includeLower !== undefined) {
    output.writeFieldBegin('includeLower', Thrift.Type.BOOL, 11);
    output.writeBool(this.includeLower);
    output.writeFieldEnd();
  }
  if (this.includeUpper !== null && this.includeUpper !== undefined) {
    output.writeFieldBegin('includeUpper', Thrift.Type.BOOL, 12);
    output.writeBool(this.includeUpper);
    output.writeFieldEnd();
  }
  if (this.isProcessTime !== null && this.isProcessTime !== undefined) {
    output.writeFieldBegin('isProcessTime', Thrift.Type.BOOL, 13);
    output.writeBool(this.isProcessTime);
    output.writeFieldEnd();
  }
  if (this.timeIsAsc !== null && this.timeIsAsc !== undefined) {
    output.writeFieldBegin('timeIsAsc', Thrift.Type.BOOL, 14);
    output.writeBool(this.timeIsAsc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TScanModel = module.exports.TScanModel = function(args) {
  this.scanfields = null;
  this.scanSize = 1000;
  this.scrollID = null;
  this.sortField = null;
  this.sortRuleASC = true;
  if (args) {
    if (args.scanfields !== undefined && args.scanfields !== null) {
      this.scanfields = Thrift.copyList(args.scanfields, [null]);
    }
    if (args.scanSize !== undefined && args.scanSize !== null) {
      this.scanSize = args.scanSize;
    }
    if (args.scrollID !== undefined && args.scrollID !== null) {
      this.scrollID = args.scrollID;
    }
    if (args.sortField !== undefined && args.sortField !== null) {
      this.sortField = args.sortField;
    }
    if (args.sortRuleASC !== undefined && args.sortRuleASC !== null) {
      this.sortRuleASC = args.sortRuleASC;
    }
  }
};
TScanModel.prototype = {};
TScanModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.scanfields = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.scanfields.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.scanSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.scrollID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sortField = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.sortRuleASC = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TScanModel.prototype.write = function(output) {
  output.writeStructBegin('TScanModel');
  if (this.scanfields !== null && this.scanfields !== undefined) {
    output.writeFieldBegin('scanfields', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.scanfields.length);
    for (var iter23 in this.scanfields)
    {
      if (this.scanfields.hasOwnProperty(iter23))
      {
        iter23 = this.scanfields[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.scanSize !== null && this.scanSize !== undefined) {
    output.writeFieldBegin('scanSize', Thrift.Type.I32, 2);
    output.writeI32(this.scanSize);
    output.writeFieldEnd();
  }
  if (this.scrollID !== null && this.scrollID !== undefined) {
    output.writeFieldBegin('scrollID', Thrift.Type.STRING, 3);
    output.writeString(this.scrollID);
    output.writeFieldEnd();
  }
  if (this.sortField !== null && this.sortField !== undefined) {
    output.writeFieldBegin('sortField', Thrift.Type.STRING, 4);
    output.writeString(this.sortField);
    output.writeFieldEnd();
  }
  if (this.sortRuleASC !== null && this.sortRuleASC !== undefined) {
    output.writeFieldBegin('sortRuleASC', Thrift.Type.BOOL, 5);
    output.writeBool(this.sortRuleASC);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ESStructTypeModel = module.exports.ESStructTypeModel = function(args) {
  this.fieldName = null;
  this.fieldType = null;
  this.data = null;
  if (args) {
    if (args.fieldName !== undefined && args.fieldName !== null) {
      this.fieldName = args.fieldName;
    }
    if (args.fieldType !== undefined && args.fieldType !== null) {
      this.fieldType = args.fieldType;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
ESStructTypeModel.prototype = {};
ESStructTypeModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fieldName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.fieldType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ESStructTypeModel.prototype.write = function(output) {
  output.writeStructBegin('ESStructTypeModel');
  if (this.fieldName !== null && this.fieldName !== undefined) {
    output.writeFieldBegin('fieldName', Thrift.Type.STRING, 1);
    output.writeString(this.fieldName);
    output.writeFieldEnd();
  }
  if (this.fieldType !== null && this.fieldType !== undefined) {
    output.writeFieldBegin('fieldType', Thrift.Type.I32, 2);
    output.writeI32(this.fieldType);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 3);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TUpdateModel = module.exports.TUpdateModel = function(args) {
  this.fieldTypeList = null;
  if (args) {
    if (args.fieldTypeList !== undefined && args.fieldTypeList !== null) {
      this.fieldTypeList = Thrift.copyList(args.fieldTypeList, [ttypes.ESStructTypeModel]);
    }
  }
};
TUpdateModel.prototype = {};
TUpdateModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.fieldTypeList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.ESStructTypeModel();
          elem30.read(input);
          this.fieldTypeList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUpdateModel.prototype.write = function(output) {
  output.writeStructBegin('TUpdateModel');
  if (this.fieldTypeList !== null && this.fieldTypeList !== undefined) {
    output.writeFieldBegin('fieldTypeList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.fieldTypeList.length);
    for (var iter31 in this.fieldTypeList)
    {
      if (this.fieldTypeList.hasOwnProperty(iter31))
      {
        iter31 = this.fieldTypeList[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanResult = module.exports.ScanResult = function(args) {
  this.lines = null;
  this.totalCount = null;
  this.scanCount = null;
  this.scrollID = null;
  if (args) {
    if (args.lines !== undefined && args.lines !== null) {
      this.lines = Thrift.copyList(args.lines, [Thrift.copyMap, null]);
    }
    if (args.totalCount !== undefined && args.totalCount !== null) {
      this.totalCount = args.totalCount;
    }
    if (args.scanCount !== undefined && args.scanCount !== null) {
      this.scanCount = args.scanCount;
    }
    if (args.scrollID !== undefined && args.scrollID !== null) {
      this.scrollID = args.scrollID;
    }
  }
};
ScanResult.prototype = {};
ScanResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.lines = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          var _size39 = 0;
          var _rtmp343;
          elem38 = {};
          var _ktype40 = 0;
          var _vtype41 = 0;
          _rtmp343 = input.readMapBegin();
          _ktype40 = _rtmp343.ktype;
          _vtype41 = _rtmp343.vtype;
          _size39 = _rtmp343.size;
          for (var _i44 = 0; _i44 < _size39; ++_i44)
          {
            var key45 = null;
            var val46 = null;
            key45 = input.readString();
            val46 = input.readString();
            elem38[key45] = val46;
          }
          input.readMapEnd();
          this.lines.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.totalCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.scanCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.scrollID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanResult.prototype.write = function(output) {
  output.writeStructBegin('ScanResult');
  if (this.lines !== null && this.lines !== undefined) {
    output.writeFieldBegin('lines', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.MAP, this.lines.length);
    for (var iter47 in this.lines)
    {
      if (this.lines.hasOwnProperty(iter47))
      {
        iter47 = this.lines[iter47];
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(iter47));
        for (var kiter48 in iter47)
        {
          if (iter47.hasOwnProperty(kiter48))
          {
            var viter49 = iter47[kiter48];
            output.writeString(kiter48);
            output.writeString(viter49);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.totalCount !== null && this.totalCount !== undefined) {
    output.writeFieldBegin('totalCount', Thrift.Type.I64, 2);
    output.writeI64(this.totalCount);
    output.writeFieldEnd();
  }
  if (this.scanCount !== null && this.scanCount !== undefined) {
    output.writeFieldBegin('scanCount', Thrift.Type.I64, 3);
    output.writeI64(this.scanCount);
    output.writeFieldEnd();
  }
  if (this.scrollID !== null && this.scrollID !== undefined) {
    output.writeFieldBegin('scrollID', Thrift.Type.STRING, 4);
    output.writeString(this.scrollID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TQueryIndexModel = module.exports.TQueryIndexModel = function(args) {
  this.a_from = null;
  this.a_to = null;
  this.userId = null;
  this.database = null;
  this.isProcessTime = false;
  if (args) {
    if (args.a_from !== undefined && args.a_from !== null) {
      this.a_from = args.a_from;
    }
    if (args.a_to !== undefined && args.a_to !== null) {
      this.a_to = args.a_to;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.database !== undefined && args.database !== null) {
      this.database = args.database;
    }
    if (args.isProcessTime !== undefined && args.isProcessTime !== null) {
      this.isProcessTime = args.isProcessTime;
    }
  }
};
TQueryIndexModel.prototype = {};
TQueryIndexModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.a_from = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.a_to = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.database = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isProcessTime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TQueryIndexModel.prototype.write = function(output) {
  output.writeStructBegin('TQueryIndexModel');
  if (this.a_from !== null && this.a_from !== undefined) {
    output.writeFieldBegin('a_from', Thrift.Type.I64, 1);
    output.writeI64(this.a_from);
    output.writeFieldEnd();
  }
  if (this.a_to !== null && this.a_to !== undefined) {
    output.writeFieldBegin('a_to', Thrift.Type.I64, 2);
    output.writeI64(this.a_to);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 3);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRING, 4);
    output.writeString(this.database);
    output.writeFieldEnd();
  }
  if (this.isProcessTime !== null && this.isProcessTime !== undefined) {
    output.writeFieldBegin('isProcessTime', Thrift.Type.BOOL, 5);
    output.writeBool(this.isProcessTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRecordModel = module.exports.TRecordModel = function(args) {
  this.type = null;
  this.auxiliaryFields = null;
  this.fields = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.auxiliaryFields !== undefined && args.auxiliaryFields !== null) {
      this.auxiliaryFields = Thrift.copyMap(args.auxiliaryFields, [null]);
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = Thrift.copyMap(args.fields, [null]);
    }
  }
};
TRecordModel.prototype = {};
TRecordModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size50 = 0;
        var _rtmp354;
        this.auxiliaryFields = {};
        var _ktype51 = 0;
        var _vtype52 = 0;
        _rtmp354 = input.readMapBegin();
        _ktype51 = _rtmp354.ktype;
        _vtype52 = _rtmp354.vtype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var key56 = null;
          var val57 = null;
          key56 = input.readString();
          val57 = input.readString();
          this.auxiliaryFields[key56] = val57;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size58 = 0;
        var _rtmp362;
        this.fields = {};
        var _ktype59 = 0;
        var _vtype60 = 0;
        _rtmp362 = input.readMapBegin();
        _ktype59 = _rtmp362.ktype;
        _vtype60 = _rtmp362.vtype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var key64 = null;
          var val65 = null;
          key64 = input.readString();
          val65 = input.readString();
          this.fields[key64] = val65;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRecordModel.prototype.write = function(output) {
  output.writeStructBegin('TRecordModel');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.auxiliaryFields !== null && this.auxiliaryFields !== undefined) {
    output.writeFieldBegin('auxiliaryFields', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.auxiliaryFields));
    for (var kiter66 in this.auxiliaryFields)
    {
      if (this.auxiliaryFields.hasOwnProperty(kiter66))
      {
        var viter67 = this.auxiliaryFields[kiter66];
        output.writeString(kiter66);
        output.writeString(viter67);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.fields));
    for (var kiter68 in this.fields)
    {
      if (this.fields.hasOwnProperty(kiter68))
      {
        var viter69 = this.fields[kiter68];
        output.writeString(kiter68);
        output.writeString(viter69);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TResultModel = module.exports.TResultModel = function(args) {
  this.hits = null;
  this.tooktime = null;
  this.pageSize = null;
  this.pageNum = null;
  this.count = null;
  if (args) {
    if (args.hits !== undefined && args.hits !== null) {
      this.hits = Thrift.copyList(args.hits, [ttypes.TRecordModel]);
    }
    if (args.tooktime !== undefined && args.tooktime !== null) {
      this.tooktime = args.tooktime;
    }
    if (args.pageSize !== undefined && args.pageSize !== null) {
      this.pageSize = args.pageSize;
    }
    if (args.pageNum !== undefined && args.pageNum !== null) {
      this.pageNum = args.pageNum;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
TResultModel.prototype = {};
TResultModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.hits = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = new ttypes.TRecordModel();
          elem76.read(input);
          this.hits.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tooktime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.pageNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TResultModel.prototype.write = function(output) {
  output.writeStructBegin('TResultModel');
  if (this.hits !== null && this.hits !== undefined) {
    output.writeFieldBegin('hits', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.hits.length);
    for (var iter77 in this.hits)
    {
      if (this.hits.hasOwnProperty(iter77))
      {
        iter77 = this.hits[iter77];
        iter77.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tooktime !== null && this.tooktime !== undefined) {
    output.writeFieldBegin('tooktime', Thrift.Type.STRING, 2);
    output.writeString(this.tooktime);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 3);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  if (this.pageNum !== null && this.pageNum !== undefined) {
    output.writeFieldBegin('pageNum', Thrift.Type.I32, 4);
    output.writeI32(this.pageNum);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I64, 5);
    output.writeI64(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TFieldAttr = module.exports.TFieldAttr = function(args) {
  this.name = null;
  this.type = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
TFieldAttr.prototype = {};
TFieldAttr.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFieldAttr.prototype.write = function(output) {
  output.writeStructBegin('TFieldAttr');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TMappingMetaModel = module.exports.TMappingMetaModel = function(args) {
  this.index = null;
  this.type = null;
  this.auxiliaryFields = null;
  this.fields = null;
  if (args) {
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.auxiliaryFields !== undefined && args.auxiliaryFields !== null) {
      this.auxiliaryFields = Thrift.copyList(args.auxiliaryFields, [ttypes.TFieldAttr]);
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = Thrift.copyList(args.fields, [ttypes.TFieldAttr]);
    }
  }
};
TMappingMetaModel.prototype = {};
TMappingMetaModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.index = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size78 = 0;
        var _rtmp382;
        this.auxiliaryFields = [];
        var _etype81 = 0;
        _rtmp382 = input.readListBegin();
        _etype81 = _rtmp382.etype;
        _size78 = _rtmp382.size;
        for (var _i83 = 0; _i83 < _size78; ++_i83)
        {
          var elem84 = null;
          elem84 = new ttypes.TFieldAttr();
          elem84.read(input);
          this.auxiliaryFields.push(elem84);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size85 = 0;
        var _rtmp389;
        this.fields = [];
        var _etype88 = 0;
        _rtmp389 = input.readListBegin();
        _etype88 = _rtmp389.etype;
        _size85 = _rtmp389.size;
        for (var _i90 = 0; _i90 < _size85; ++_i90)
        {
          var elem91 = null;
          elem91 = new ttypes.TFieldAttr();
          elem91.read(input);
          this.fields.push(elem91);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMappingMetaModel.prototype.write = function(output) {
  output.writeStructBegin('TMappingMetaModel');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.STRING, 1);
    output.writeString(this.index);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.auxiliaryFields !== null && this.auxiliaryFields !== undefined) {
    output.writeFieldBegin('auxiliaryFields', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.auxiliaryFields.length);
    for (var iter92 in this.auxiliaryFields)
    {
      if (this.auxiliaryFields.hasOwnProperty(iter92))
      {
        iter92 = this.auxiliaryFields[iter92];
        iter92.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.fields.length);
    for (var iter93 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter93))
      {
        iter93 = this.fields[iter93];
        iter93.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TResultTable = module.exports.TResultTable = function(args) {
  this.header = null;
  this.datas = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = Thrift.copyList(args.header, [null]);
    }
    if (args.datas !== undefined && args.datas !== null) {
      this.datas = Thrift.copyList(args.datas, [Thrift.copyList, null]);
    }
  }
};
TResultTable.prototype = {};
TResultTable.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size94 = 0;
        var _rtmp398;
        this.header = [];
        var _etype97 = 0;
        _rtmp398 = input.readListBegin();
        _etype97 = _rtmp398.etype;
        _size94 = _rtmp398.size;
        for (var _i99 = 0; _i99 < _size94; ++_i99)
        {
          var elem100 = null;
          elem100 = input.readString();
          this.header.push(elem100);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size101 = 0;
        var _rtmp3105;
        this.datas = [];
        var _etype104 = 0;
        _rtmp3105 = input.readListBegin();
        _etype104 = _rtmp3105.etype;
        _size101 = _rtmp3105.size;
        for (var _i106 = 0; _i106 < _size101; ++_i106)
        {
          var elem107 = null;
          var _size108 = 0;
          var _rtmp3112;
          elem107 = [];
          var _etype111 = 0;
          _rtmp3112 = input.readListBegin();
          _etype111 = _rtmp3112.etype;
          _size108 = _rtmp3112.size;
          for (var _i113 = 0; _i113 < _size108; ++_i113)
          {
            var elem114 = null;
            elem114 = input.readString();
            elem107.push(elem114);
          }
          input.readListEnd();
          this.datas.push(elem107);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TResultTable.prototype.write = function(output) {
  output.writeStructBegin('TResultTable');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.header.length);
    for (var iter115 in this.header)
    {
      if (this.header.hasOwnProperty(iter115))
      {
        iter115 = this.header[iter115];
        output.writeString(iter115);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.datas !== null && this.datas !== undefined) {
    output.writeFieldBegin('datas', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.datas.length);
    for (var iter116 in this.datas)
    {
      if (this.datas.hasOwnProperty(iter116))
      {
        iter116 = this.datas[iter116];
        output.writeListBegin(Thrift.Type.STRING, iter116.length);
        for (var iter117 in iter116)
        {
          if (iter116.hasOwnProperty(iter117))
          {
            iter117 = iter116[iter117];
            output.writeString(iter117);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FieldStatResult = module.exports.FieldStatResult = function(args) {
  this.field = null;
  this.count = null;
  this.avg = null;
  this.max = null;
  this.min = null;
  this.sum = null;
  this.dcount = null;
  this.terms = null;
  this.stat = true;
  if (args) {
    if (args.field !== undefined && args.field !== null) {
      this.field = args.field;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.avg !== undefined && args.avg !== null) {
      this.avg = args.avg;
    }
    if (args.max !== undefined && args.max !== null) {
      this.max = args.max;
    }
    if (args.min !== undefined && args.min !== null) {
      this.min = args.min;
    }
    if (args.sum !== undefined && args.sum !== null) {
      this.sum = args.sum;
    }
    if (args.dcount !== undefined && args.dcount !== null) {
      this.dcount = args.dcount;
    }
    if (args.terms !== undefined && args.terms !== null) {
      this.terms = Thrift.copyMap(args.terms, [null]);
    }
    if (args.stat !== undefined && args.stat !== null) {
      this.stat = args.stat;
    }
  }
};
FieldStatResult.prototype = {};
FieldStatResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.field = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.avg = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.max = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.min = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.sum = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.dcount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size118 = 0;
        var _rtmp3122;
        this.terms = {};
        var _ktype119 = 0;
        var _vtype120 = 0;
        _rtmp3122 = input.readMapBegin();
        _ktype119 = _rtmp3122.ktype;
        _vtype120 = _rtmp3122.vtype;
        _size118 = _rtmp3122.size;
        for (var _i123 = 0; _i123 < _size118; ++_i123)
        {
          var key124 = null;
          var val125 = null;
          key124 = input.readString();
          val125 = input.readI64();
          this.terms[key124] = val125;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.stat = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FieldStatResult.prototype.write = function(output) {
  output.writeStructBegin('FieldStatResult');
  if (this.field !== null && this.field !== undefined) {
    output.writeFieldBegin('field', Thrift.Type.STRING, 1);
    output.writeString(this.field);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I64, 2);
    output.writeI64(this.count);
    output.writeFieldEnd();
  }
  if (this.avg !== null && this.avg !== undefined) {
    output.writeFieldBegin('avg', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.avg);
    output.writeFieldEnd();
  }
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.max);
    output.writeFieldEnd();
  }
  if (this.min !== null && this.min !== undefined) {
    output.writeFieldBegin('min', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.min);
    output.writeFieldEnd();
  }
  if (this.sum !== null && this.sum !== undefined) {
    output.writeFieldBegin('sum', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.sum);
    output.writeFieldEnd();
  }
  if (this.dcount !== null && this.dcount !== undefined) {
    output.writeFieldBegin('dcount', Thrift.Type.I64, 7);
    output.writeI64(this.dcount);
    output.writeFieldEnd();
  }
  if (this.terms !== null && this.terms !== undefined) {
    output.writeFieldBegin('terms', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.terms));
    for (var kiter126 in this.terms)
    {
      if (this.terms.hasOwnProperty(kiter126))
      {
        var viter127 = this.terms[kiter126];
        output.writeString(kiter126);
        output.writeI64(viter127);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.stat !== null && this.stat !== undefined) {
    output.writeFieldBegin('stat', Thrift.Type.BOOL, 9);
    output.writeBool(this.stat);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DELResult = module.exports.DELResult = function(args) {
  this.deleted = null;
  this.failed = null;
  this.found = null;
  this.missing = null;
  if (args) {
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
    if (args.failed !== undefined && args.failed !== null) {
      this.failed = args.failed;
    }
    if (args.found !== undefined && args.found !== null) {
      this.found = args.found;
    }
    if (args.missing !== undefined && args.missing !== null) {
      this.missing = args.missing;
    }
  }
};
DELResult.prototype = {};
DELResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.failed = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.found = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.missing = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DELResult.prototype.write = function(output) {
  output.writeStructBegin('DELResult');
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 1);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.failed !== null && this.failed !== undefined) {
    output.writeFieldBegin('failed', Thrift.Type.I64, 2);
    output.writeI64(this.failed);
    output.writeFieldEnd();
  }
  if (this.found !== null && this.found !== undefined) {
    output.writeFieldBegin('found', Thrift.Type.I64, 3);
    output.writeI64(this.found);
    output.writeFieldEnd();
  }
  if (this.missing !== null && this.missing !== undefined) {
    output.writeFieldBegin('missing', Thrift.Type.I64, 4);
    output.writeI64(this.missing);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateResult = module.exports.UpdateResult = function(args) {
  this.batches = null;
  this.searchFailures = null;
  this.noops = null;
  this.tookTime = null;
  this.updated = null;
  this.versionConflicts = null;
  this.indexingFailures = null;
  if (args) {
    if (args.batches !== undefined && args.batches !== null) {
      this.batches = args.batches;
    }
    if (args.searchFailures !== undefined && args.searchFailures !== null) {
      this.searchFailures = args.searchFailures;
    }
    if (args.noops !== undefined && args.noops !== null) {
      this.noops = args.noops;
    }
    if (args.tookTime !== undefined && args.tookTime !== null) {
      this.tookTime = args.tookTime;
    }
    if (args.updated !== undefined && args.updated !== null) {
      this.updated = args.updated;
    }
    if (args.versionConflicts !== undefined && args.versionConflicts !== null) {
      this.versionConflicts = args.versionConflicts;
    }
    if (args.indexingFailures !== undefined && args.indexingFailures !== null) {
      this.indexingFailures = args.indexingFailures;
    }
  }
};
UpdateResult.prototype = {};
UpdateResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.batches = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.searchFailures = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.noops = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.tookTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.versionConflicts = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.indexingFailures = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateResult.prototype.write = function(output) {
  output.writeStructBegin('UpdateResult');
  if (this.batches !== null && this.batches !== undefined) {
    output.writeFieldBegin('batches', Thrift.Type.I64, 1);
    output.writeI64(this.batches);
    output.writeFieldEnd();
  }
  if (this.searchFailures !== null && this.searchFailures !== undefined) {
    output.writeFieldBegin('searchFailures', Thrift.Type.I64, 2);
    output.writeI64(this.searchFailures);
    output.writeFieldEnd();
  }
  if (this.noops !== null && this.noops !== undefined) {
    output.writeFieldBegin('noops', Thrift.Type.I64, 3);
    output.writeI64(this.noops);
    output.writeFieldEnd();
  }
  if (this.tookTime !== null && this.tookTime !== undefined) {
    output.writeFieldBegin('tookTime', Thrift.Type.I64, 4);
    output.writeI64(this.tookTime);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 5);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.versionConflicts !== null && this.versionConflicts !== undefined) {
    output.writeFieldBegin('versionConflicts', Thrift.Type.I64, 6);
    output.writeI64(this.versionConflicts);
    output.writeFieldEnd();
  }
  if (this.indexingFailures !== null && this.indexingFailures !== undefined) {
    output.writeFieldBegin('indexingFailures', Thrift.Type.I64, 7);
    output.writeI64(this.indexingFailures);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCSVResult = module.exports.TCSVResult = function(args) {
  this.headers = null;
  this.lines = null;
  if (args) {
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = Thrift.copyList(args.headers, [null]);
    }
    if (args.lines !== undefined && args.lines !== null) {
      this.lines = Thrift.copyList(args.lines, [null]);
    }
  }
};
TCSVResult.prototype = {};
TCSVResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.headers = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = input.readString();
          this.headers.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size135 = 0;
        var _rtmp3139;
        this.lines = [];
        var _etype138 = 0;
        _rtmp3139 = input.readListBegin();
        _etype138 = _rtmp3139.etype;
        _size135 = _rtmp3139.size;
        for (var _i140 = 0; _i140 < _size135; ++_i140)
        {
          var elem141 = null;
          elem141 = input.readString();
          this.lines.push(elem141);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCSVResult.prototype.write = function(output) {
  output.writeStructBegin('TCSVResult');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.headers.length);
    for (var iter142 in this.headers)
    {
      if (this.headers.hasOwnProperty(iter142))
      {
        iter142 = this.headers[iter142];
        output.writeString(iter142);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lines !== null && this.lines !== undefined) {
    output.writeFieldBegin('lines', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.lines.length);
    for (var iter143 in this.lines)
    {
      if (this.lines.hasOwnProperty(iter143))
      {
        iter143 = this.lines[iter143];
        output.writeString(iter143);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CSVParameter = module.exports.CSVParameter = function(args) {
  this.flat = true;
  this.separator = ',';
  if (args) {
    if (args.flat !== undefined && args.flat !== null) {
      this.flat = args.flat;
    }
    if (args.separator !== undefined && args.separator !== null) {
      this.separator = args.separator;
    }
  }
};
CSVParameter.prototype = {};
CSVParameter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.flat = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.separator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSVParameter.prototype.write = function(output) {
  output.writeStructBegin('CSVParameter');
  if (this.flat !== null && this.flat !== undefined) {
    output.writeFieldBegin('flat', Thrift.Type.BOOL, 1);
    output.writeBool(this.flat);
    output.writeFieldEnd();
  }
  if (this.separator !== null && this.separator !== undefined) {
    output.writeFieldBegin('separator', Thrift.Type.STRING, 2);
    output.writeString(this.separator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

