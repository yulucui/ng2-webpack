//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Exception_ttypes = require('./Exception_types')
var ESmodel_ttypes = require('./ESmodel_types')


var ttypes = require('./ESService_types');
//HELPER FUNCTIONS AND STRUCTURES

SearchData_query_args = function(args) {
  this.model = null;
  if (args) {
    if (args.model !== undefined && args.model !== null) {
      this.model = new ESmodel_ttypes.TQueryModel(args.model);
    }
  }
};
SearchData_query_args.prototype = {};
SearchData_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.model = new ESmodel_ttypes.TQueryModel();
        this.model.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_query_args.prototype.write = function(output) {
  output.writeStructBegin('SearchData_query_args');
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRUCT, 1);
    this.model.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_query_result = function(args) {
  this.success = null;
  this.RException = null;
  if (args instanceof Exception_ttypes.RException) {
    this.RException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ESmodel_ttypes.TResultModel(args.success);
    }
    if (args.RException !== undefined && args.RException !== null) {
      this.RException = args.RException;
    }
  }
};
SearchData_query_result.prototype = {};
SearchData_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ESmodel_ttypes.TResultModel();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.RException = new Exception_ttypes.RException();
        this.RException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_query_result.prototype.write = function(output) {
  output.writeStructBegin('SearchData_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.RException !== null && this.RException !== undefined) {
    output.writeFieldBegin('RException', Thrift.Type.STRUCT, 1);
    this.RException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_query2CSV_args = function(args) {
  this.model = null;
  this.csvParameter = null;
  if (args) {
    if (args.model !== undefined && args.model !== null) {
      this.model = new ESmodel_ttypes.TQueryModel(args.model);
    }
    if (args.csvParameter !== undefined && args.csvParameter !== null) {
      this.csvParameter = new ESmodel_ttypes.CSVParameter(args.csvParameter);
    }
  }
};
SearchData_query2CSV_args.prototype = {};
SearchData_query2CSV_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.model = new ESmodel_ttypes.TQueryModel();
        this.model.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.csvParameter = new ESmodel_ttypes.CSVParameter();
        this.csvParameter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_query2CSV_args.prototype.write = function(output) {
  output.writeStructBegin('SearchData_query2CSV_args');
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRUCT, 1);
    this.model.write(output);
    output.writeFieldEnd();
  }
  if (this.csvParameter !== null && this.csvParameter !== undefined) {
    output.writeFieldBegin('csvParameter', Thrift.Type.STRUCT, 2);
    this.csvParameter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_query2CSV_result = function(args) {
  this.success = null;
  this.RException = null;
  if (args instanceof Exception_ttypes.RException) {
    this.RException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ESmodel_ttypes.TCSVResult(args.success);
    }
    if (args.RException !== undefined && args.RException !== null) {
      this.RException = args.RException;
    }
  }
};
SearchData_query2CSV_result.prototype = {};
SearchData_query2CSV_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ESmodel_ttypes.TCSVResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.RException = new Exception_ttypes.RException();
        this.RException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_query2CSV_result.prototype.write = function(output) {
  output.writeStructBegin('SearchData_query2CSV_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.RException !== null && this.RException !== undefined) {
    output.writeFieldBegin('RException', Thrift.Type.STRUCT, 1);
    this.RException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_queryReport_args = function(args) {
  this.model = null;
  if (args) {
    if (args.model !== undefined && args.model !== null) {
      this.model = new ESmodel_ttypes.TQueryModel(args.model);
    }
  }
};
SearchData_queryReport_args.prototype = {};
SearchData_queryReport_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.model = new ESmodel_ttypes.TQueryModel();
        this.model.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_queryReport_args.prototype.write = function(output) {
  output.writeStructBegin('SearchData_queryReport_args');
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRUCT, 1);
    this.model.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_queryReport_result = function(args) {
  this.success = null;
  this.RException = null;
  if (args instanceof Exception_ttypes.RException) {
    this.RException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ESmodel_ttypes.TResultTable(args.success);
    }
    if (args.RException !== undefined && args.RException !== null) {
      this.RException = args.RException;
    }
  }
};
SearchData_queryReport_result.prototype = {};
SearchData_queryReport_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ESmodel_ttypes.TResultTable();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.RException = new Exception_ttypes.RException();
        this.RException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_queryReport_result.prototype.write = function(output) {
  output.writeStructBegin('SearchData_queryReport_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.RException !== null && this.RException !== undefined) {
    output.writeFieldBegin('RException', Thrift.Type.STRUCT, 1);
    this.RException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_queryReport2CSV_args = function(args) {
  this.model = null;
  this.csvParameter = null;
  if (args) {
    if (args.model !== undefined && args.model !== null) {
      this.model = new ESmodel_ttypes.TQueryModel(args.model);
    }
    if (args.csvParameter !== undefined && args.csvParameter !== null) {
      this.csvParameter = new ESmodel_ttypes.CSVParameter(args.csvParameter);
    }
  }
};
SearchData_queryReport2CSV_args.prototype = {};
SearchData_queryReport2CSV_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.model = new ESmodel_ttypes.TQueryModel();
        this.model.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.csvParameter = new ESmodel_ttypes.CSVParameter();
        this.csvParameter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_queryReport2CSV_args.prototype.write = function(output) {
  output.writeStructBegin('SearchData_queryReport2CSV_args');
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRUCT, 1);
    this.model.write(output);
    output.writeFieldEnd();
  }
  if (this.csvParameter !== null && this.csvParameter !== undefined) {
    output.writeFieldBegin('csvParameter', Thrift.Type.STRUCT, 2);
    this.csvParameter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_queryReport2CSV_result = function(args) {
  this.success = null;
  this.RException = null;
  if (args instanceof Exception_ttypes.RException) {
    this.RException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ESmodel_ttypes.TCSVResult(args.success);
    }
    if (args.RException !== undefined && args.RException !== null) {
      this.RException = args.RException;
    }
  }
};
SearchData_queryReport2CSV_result.prototype = {};
SearchData_queryReport2CSV_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ESmodel_ttypes.TCSVResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.RException = new Exception_ttypes.RException();
        this.RException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_queryReport2CSV_result.prototype.write = function(output) {
  output.writeStructBegin('SearchData_queryReport2CSV_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.RException !== null && this.RException !== undefined) {
    output.writeFieldBegin('RException', Thrift.Type.STRUCT, 1);
    this.RException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_getDocNum_args = function(args) {
  this.indecies = null;
  this.types = null;
  if (args) {
    if (args.indecies !== undefined && args.indecies !== null) {
      this.indecies = Thrift.copyList(args.indecies, [null]);
    }
    if (args.types !== undefined && args.types !== null) {
      this.types = Thrift.copyList(args.types, [null]);
    }
  }
};
SearchData_getDocNum_args.prototype = {};
SearchData_getDocNum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.indecies = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.indecies.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size7 = 0;
        var _rtmp311;
        this.types = [];
        var _etype10 = 0;
        _rtmp311 = input.readSetBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString();
          this.types.push(elem13);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_getDocNum_args.prototype.write = function(output) {
  output.writeStructBegin('SearchData_getDocNum_args');
  if (this.indecies !== null && this.indecies !== undefined) {
    output.writeFieldBegin('indecies', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.indecies.length);
    for (var iter14 in this.indecies)
    {
      if (this.indecies.hasOwnProperty(iter14))
      {
        iter14 = this.indecies[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.types !== null && this.types !== undefined) {
    output.writeFieldBegin('types', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.types.length);
    for (var iter15 in this.types)
    {
      if (this.types.hasOwnProperty(iter15))
      {
        iter15 = this.types[iter15];
        output.writeString(iter15);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_getDocNum_result = function(args) {
  this.success = null;
  this.RException = null;
  if (args instanceof Exception_ttypes.RException) {
    this.RException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.RException !== undefined && args.RException !== null) {
      this.RException = args.RException;
    }
  }
};
SearchData_getDocNum_result.prototype = {};
SearchData_getDocNum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.RException = new Exception_ttypes.RException();
        this.RException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_getDocNum_result.prototype.write = function(output) {
  output.writeStructBegin('SearchData_getDocNum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.RException !== null && this.RException !== undefined) {
    output.writeFieldBegin('RException', Thrift.Type.STRUCT, 1);
    this.RException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_queryIndecies_args = function(args) {
  this.model = null;
  if (args) {
    if (args.model !== undefined && args.model !== null) {
      this.model = new ESmodel_ttypes.TQueryIndexModel(args.model);
    }
  }
};
SearchData_queryIndecies_args.prototype = {};
SearchData_queryIndecies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.model = new ESmodel_ttypes.TQueryIndexModel();
        this.model.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_queryIndecies_args.prototype.write = function(output) {
  output.writeStructBegin('SearchData_queryIndecies_args');
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRUCT, 1);
    this.model.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_queryIndecies_result = function(args) {
  this.success = null;
  this.RException = null;
  if (args instanceof Exception_ttypes.RException) {
    this.RException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.RException !== undefined && args.RException !== null) {
      this.RException = args.RException;
    }
  }
};
SearchData_queryIndecies_result.prototype = {};
SearchData_queryIndecies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.RException = new Exception_ttypes.RException();
        this.RException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_queryIndecies_result.prototype.write = function(output) {
  output.writeStructBegin('SearchData_queryIndecies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.RException !== null && this.RException !== undefined) {
    output.writeFieldBegin('RException', Thrift.Type.STRUCT, 1);
    this.RException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_getFieldMetaDataByUserIdAndType_args = function(args) {
  this.userId = null;
  this.types = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.types !== undefined && args.types !== null) {
      this.types = Thrift.copyList(args.types, [null]);
    }
  }
};
SearchData_getFieldMetaDataByUserIdAndType_args.prototype = {};
SearchData_getFieldMetaDataByUserIdAndType_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size24 = 0;
        var _rtmp328;
        this.types = [];
        var _etype27 = 0;
        _rtmp328 = input.readSetBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString();
          this.types.push(elem30);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_getFieldMetaDataByUserIdAndType_args.prototype.write = function(output) {
  output.writeStructBegin('SearchData_getFieldMetaDataByUserIdAndType_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.types !== null && this.types !== undefined) {
    output.writeFieldBegin('types', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.types.length);
    for (var iter31 in this.types)
    {
      if (this.types.hasOwnProperty(iter31))
      {
        iter31 = this.types[iter31];
        output.writeString(iter31);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_getFieldMetaDataByUserIdAndType_result = function(args) {
  this.success = null;
  this.RException = null;
  if (args instanceof Exception_ttypes.RException) {
    this.RException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ESmodel_ttypes.TMappingMetaModel]);
    }
    if (args.RException !== undefined && args.RException !== null) {
      this.RException = args.RException;
    }
  }
};
SearchData_getFieldMetaDataByUserIdAndType_result.prototype = {};
SearchData_getFieldMetaDataByUserIdAndType_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.success = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ESmodel_ttypes.TMappingMetaModel();
          elem38.read(input);
          this.success.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.RException = new Exception_ttypes.RException();
        this.RException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_getFieldMetaDataByUserIdAndType_result.prototype.write = function(output) {
  output.writeStructBegin('SearchData_getFieldMetaDataByUserIdAndType_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter39 in this.success)
    {
      if (this.success.hasOwnProperty(iter39))
      {
        iter39 = this.success[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.RException !== null && this.RException !== undefined) {
    output.writeFieldBegin('RException', Thrift.Type.STRUCT, 1);
    this.RException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_getFieldMetaDataByIndeciesAndType_args = function(args) {
  this.indecies = null;
  this.type = null;
  if (args) {
    if (args.indecies !== undefined && args.indecies !== null) {
      this.indecies = Thrift.copyList(args.indecies, [null]);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
SearchData_getFieldMetaDataByIndeciesAndType_args.prototype = {};
SearchData_getFieldMetaDataByIndeciesAndType_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.indecies = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readString();
          this.indecies.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_getFieldMetaDataByIndeciesAndType_args.prototype.write = function(output) {
  output.writeStructBegin('SearchData_getFieldMetaDataByIndeciesAndType_args');
  if (this.indecies !== null && this.indecies !== undefined) {
    output.writeFieldBegin('indecies', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.indecies.length);
    for (var iter47 in this.indecies)
    {
      if (this.indecies.hasOwnProperty(iter47))
      {
        iter47 = this.indecies[iter47];
        output.writeString(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_getFieldMetaDataByIndeciesAndType_result = function(args) {
  this.success = null;
  this.RException = null;
  if (args instanceof Exception_ttypes.RException) {
    this.RException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ESmodel_ttypes.TMappingMetaModel]);
    }
    if (args.RException !== undefined && args.RException !== null) {
      this.RException = args.RException;
    }
  }
};
SearchData_getFieldMetaDataByIndeciesAndType_result.prototype = {};
SearchData_getFieldMetaDataByIndeciesAndType_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.success = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ESmodel_ttypes.TMappingMetaModel();
          elem54.read(input);
          this.success.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.RException = new Exception_ttypes.RException();
        this.RException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_getFieldMetaDataByIndeciesAndType_result.prototype.write = function(output) {
  output.writeStructBegin('SearchData_getFieldMetaDataByIndeciesAndType_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter55 in this.success)
    {
      if (this.success.hasOwnProperty(iter55))
      {
        iter55 = this.success[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.RException !== null && this.RException !== undefined) {
    output.writeFieldBegin('RException', Thrift.Type.STRUCT, 1);
    this.RException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_getIndexNames_args = function(args) {
  this.a_from = null;
  this.a_to = null;
  this.userId = null;
  this.database = null;
  this.isProcessTime = null;
  if (args) {
    if (args.a_from !== undefined && args.a_from !== null) {
      this.a_from = args.a_from;
    }
    if (args.a_to !== undefined && args.a_to !== null) {
      this.a_to = args.a_to;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.database !== undefined && args.database !== null) {
      this.database = args.database;
    }
    if (args.isProcessTime !== undefined && args.isProcessTime !== null) {
      this.isProcessTime = args.isProcessTime;
    }
  }
};
SearchData_getIndexNames_args.prototype = {};
SearchData_getIndexNames_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.a_from = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.a_to = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.database = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isProcessTime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_getIndexNames_args.prototype.write = function(output) {
  output.writeStructBegin('SearchData_getIndexNames_args');
  if (this.a_from !== null && this.a_from !== undefined) {
    output.writeFieldBegin('a_from', Thrift.Type.I64, 1);
    output.writeI64(this.a_from);
    output.writeFieldEnd();
  }
  if (this.a_to !== null && this.a_to !== undefined) {
    output.writeFieldBegin('a_to', Thrift.Type.I64, 2);
    output.writeI64(this.a_to);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 3);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRING, 4);
    output.writeString(this.database);
    output.writeFieldEnd();
  }
  if (this.isProcessTime !== null && this.isProcessTime !== undefined) {
    output.writeFieldBegin('isProcessTime', Thrift.Type.BOOL, 5);
    output.writeBool(this.isProcessTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_getIndexNames_result = function(args) {
  this.success = null;
  this.RException = null;
  if (args instanceof Exception_ttypes.RException) {
    this.RException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.RException !== undefined && args.RException !== null) {
      this.RException = args.RException;
    }
  }
};
SearchData_getIndexNames_result.prototype = {};
SearchData_getIndexNames_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.success = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readString();
          this.success.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.RException = new Exception_ttypes.RException();
        this.RException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_getIndexNames_result.prototype.write = function(output) {
  output.writeStructBegin('SearchData_getIndexNames_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter63 in this.success)
    {
      if (this.success.hasOwnProperty(iter63))
      {
        iter63 = this.success[iter63];
        output.writeString(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.RException !== null && this.RException !== undefined) {
    output.writeFieldBegin('RException', Thrift.Type.STRUCT, 1);
    this.RException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_queryByDelete_args = function(args) {
  this.model = null;
  if (args) {
    if (args.model !== undefined && args.model !== null) {
      this.model = new ESmodel_ttypes.TQueryModel(args.model);
    }
  }
};
SearchData_queryByDelete_args.prototype = {};
SearchData_queryByDelete_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.model = new ESmodel_ttypes.TQueryModel();
        this.model.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_queryByDelete_args.prototype.write = function(output) {
  output.writeStructBegin('SearchData_queryByDelete_args');
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRUCT, 1);
    this.model.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_queryByDelete_result = function(args) {
  this.success = null;
  this.RException = null;
  if (args instanceof Exception_ttypes.RException) {
    this.RException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ESmodel_ttypes.DELResult(args.success);
    }
    if (args.RException !== undefined && args.RException !== null) {
      this.RException = args.RException;
    }
  }
};
SearchData_queryByDelete_result.prototype = {};
SearchData_queryByDelete_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ESmodel_ttypes.DELResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.RException = new Exception_ttypes.RException();
        this.RException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_queryByDelete_result.prototype.write = function(output) {
  output.writeStructBegin('SearchData_queryByDelete_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.RException !== null && this.RException !== undefined) {
    output.writeFieldBegin('RException', Thrift.Type.STRUCT, 1);
    this.RException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_scanData_args = function(args) {
  this.queryModel = null;
  this.scanModel = null;
  if (args) {
    if (args.queryModel !== undefined && args.queryModel !== null) {
      this.queryModel = new ESmodel_ttypes.TQueryModel(args.queryModel);
    }
    if (args.scanModel !== undefined && args.scanModel !== null) {
      this.scanModel = new ESmodel_ttypes.TScanModel(args.scanModel);
    }
  }
};
SearchData_scanData_args.prototype = {};
SearchData_scanData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryModel = new ESmodel_ttypes.TQueryModel();
        this.queryModel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.scanModel = new ESmodel_ttypes.TScanModel();
        this.scanModel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_scanData_args.prototype.write = function(output) {
  output.writeStructBegin('SearchData_scanData_args');
  if (this.queryModel !== null && this.queryModel !== undefined) {
    output.writeFieldBegin('queryModel', Thrift.Type.STRUCT, 1);
    this.queryModel.write(output);
    output.writeFieldEnd();
  }
  if (this.scanModel !== null && this.scanModel !== undefined) {
    output.writeFieldBegin('scanModel', Thrift.Type.STRUCT, 2);
    this.scanModel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_scanData_result = function(args) {
  this.success = null;
  this.RException = null;
  if (args instanceof Exception_ttypes.RException) {
    this.RException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ESmodel_ttypes.ScanResult(args.success);
    }
    if (args.RException !== undefined && args.RException !== null) {
      this.RException = args.RException;
    }
  }
};
SearchData_scanData_result.prototype = {};
SearchData_scanData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ESmodel_ttypes.ScanResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.RException = new Exception_ttypes.RException();
        this.RException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_scanData_result.prototype.write = function(output) {
  output.writeStructBegin('SearchData_scanData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.RException !== null && this.RException !== undefined) {
    output.writeFieldBegin('RException', Thrift.Type.STRUCT, 1);
    this.RException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_fieldStat_args = function(args) {
  this.model = null;
  this.field = null;
  this.type = null;
  this.top = null;
  if (args) {
    if (args.model !== undefined && args.model !== null) {
      this.model = new ESmodel_ttypes.TQueryModel(args.model);
    }
    if (args.field !== undefined && args.field !== null) {
      this.field = args.field;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.top !== undefined && args.top !== null) {
      this.top = args.top;
    }
  }
};
SearchData_fieldStat_args.prototype = {};
SearchData_fieldStat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.model = new ESmodel_ttypes.TQueryModel();
        this.model.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.field = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.top = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_fieldStat_args.prototype.write = function(output) {
  output.writeStructBegin('SearchData_fieldStat_args');
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRUCT, 1);
    this.model.write(output);
    output.writeFieldEnd();
  }
  if (this.field !== null && this.field !== undefined) {
    output.writeFieldBegin('field', Thrift.Type.STRING, 2);
    output.writeString(this.field);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.top !== null && this.top !== undefined) {
    output.writeFieldBegin('top', Thrift.Type.I32, 4);
    output.writeI32(this.top);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_fieldStat_result = function(args) {
  this.success = null;
  this.RException = null;
  if (args instanceof Exception_ttypes.RException) {
    this.RException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ESmodel_ttypes.FieldStatResult(args.success);
    }
    if (args.RException !== undefined && args.RException !== null) {
      this.RException = args.RException;
    }
  }
};
SearchData_fieldStat_result.prototype = {};
SearchData_fieldStat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ESmodel_ttypes.FieldStatResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.RException = new Exception_ttypes.RException();
        this.RException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_fieldStat_result.prototype.write = function(output) {
  output.writeStructBegin('SearchData_fieldStat_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.RException !== null && this.RException !== undefined) {
    output.writeFieldBegin('RException', Thrift.Type.STRUCT, 1);
    this.RException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_queryType_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
SearchData_queryType_args.prototype = {};
SearchData_queryType_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_queryType_args.prototype.write = function(output) {
  output.writeStructBegin('SearchData_queryType_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_queryType_result = function(args) {
  this.success = null;
  this.RException = null;
  if (args instanceof Exception_ttypes.RException) {
    this.RException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.RException !== undefined && args.RException !== null) {
      this.RException = args.RException;
    }
  }
};
SearchData_queryType_result.prototype = {};
SearchData_queryType_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size64 = 0;
        var _rtmp368;
        this.success = [];
        var _etype67 = 0;
        _rtmp368 = input.readSetBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readString();
          this.success.push(elem70);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.RException = new Exception_ttypes.RException();
        this.RException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_queryType_result.prototype.write = function(output) {
  output.writeStructBegin('SearchData_queryType_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRING, this.success.length);
    for (var iter71 in this.success)
    {
      if (this.success.hasOwnProperty(iter71))
      {
        iter71 = this.success[iter71];
        output.writeString(iter71);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.RException !== null && this.RException !== undefined) {
    output.writeFieldBegin('RException', Thrift.Type.STRUCT, 1);
    this.RException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_queryByUpdate_args = function(args) {
  this.queryModel = null;
  this.updateModel = null;
  if (args) {
    if (args.queryModel !== undefined && args.queryModel !== null) {
      this.queryModel = new ESmodel_ttypes.TQueryModel(args.queryModel);
    }
    if (args.updateModel !== undefined && args.updateModel !== null) {
      this.updateModel = new ESmodel_ttypes.TUpdateModel(args.updateModel);
    }
  }
};
SearchData_queryByUpdate_args.prototype = {};
SearchData_queryByUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryModel = new ESmodel_ttypes.TQueryModel();
        this.queryModel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.updateModel = new ESmodel_ttypes.TUpdateModel();
        this.updateModel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_queryByUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('SearchData_queryByUpdate_args');
  if (this.queryModel !== null && this.queryModel !== undefined) {
    output.writeFieldBegin('queryModel', Thrift.Type.STRUCT, 1);
    this.queryModel.write(output);
    output.writeFieldEnd();
  }
  if (this.updateModel !== null && this.updateModel !== undefined) {
    output.writeFieldBegin('updateModel', Thrift.Type.STRUCT, 2);
    this.updateModel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchData_queryByUpdate_result = function(args) {
  this.success = null;
  this.RException = null;
  if (args instanceof Exception_ttypes.RException) {
    this.RException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ESmodel_ttypes.UpdateResult(args.success);
    }
    if (args.RException !== undefined && args.RException !== null) {
      this.RException = args.RException;
    }
  }
};
SearchData_queryByUpdate_result.prototype = {};
SearchData_queryByUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ESmodel_ttypes.UpdateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.RException = new Exception_ttypes.RException();
        this.RException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchData_queryByUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('SearchData_queryByUpdate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.RException !== null && this.RException !== undefined) {
    output.writeFieldBegin('RException', Thrift.Type.STRUCT, 1);
    this.RException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchDataClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
SearchDataClient.prototype = {};
SearchDataClient.prototype.seqid = function() { return this._seqid; }
SearchDataClient.prototype.new_seqid = function() { return this._seqid += 1; }
SearchDataClient.prototype.query = function(model, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_query(model);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_query(model);
  }
};

SearchDataClient.prototype.send_query = function(model) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('query', Thrift.MessageType.CALL, this.seqid());
  var args = new SearchData_query_args();
  args.model = model;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SearchDataClient.prototype.recv_query = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SearchData_query_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.RException) {
    return callback(result.RException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('query failed: unknown result');
};
SearchDataClient.prototype.query2CSV = function(model, csvParameter, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_query2CSV(model, csvParameter);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_query2CSV(model, csvParameter);
  }
};

SearchDataClient.prototype.send_query2CSV = function(model, csvParameter) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('query2CSV', Thrift.MessageType.CALL, this.seqid());
  var args = new SearchData_query2CSV_args();
  args.model = model;
  args.csvParameter = csvParameter;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SearchDataClient.prototype.recv_query2CSV = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SearchData_query2CSV_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.RException) {
    return callback(result.RException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('query2CSV failed: unknown result');
};
SearchDataClient.prototype.queryReport = function(model, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryReport(model);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryReport(model);
  }
};

SearchDataClient.prototype.send_queryReport = function(model) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryReport', Thrift.MessageType.CALL, this.seqid());
  var args = new SearchData_queryReport_args();
  args.model = model;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SearchDataClient.prototype.recv_queryReport = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SearchData_queryReport_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.RException) {
    return callback(result.RException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryReport failed: unknown result');
};
SearchDataClient.prototype.queryReport2CSV = function(model, csvParameter, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryReport2CSV(model, csvParameter);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryReport2CSV(model, csvParameter);
  }
};

SearchDataClient.prototype.send_queryReport2CSV = function(model, csvParameter) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryReport2CSV', Thrift.MessageType.CALL, this.seqid());
  var args = new SearchData_queryReport2CSV_args();
  args.model = model;
  args.csvParameter = csvParameter;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SearchDataClient.prototype.recv_queryReport2CSV = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SearchData_queryReport2CSV_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.RException) {
    return callback(result.RException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryReport2CSV failed: unknown result');
};
SearchDataClient.prototype.getDocNum = function(indecies, types, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDocNum(indecies, types);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDocNum(indecies, types);
  }
};

SearchDataClient.prototype.send_getDocNum = function(indecies, types) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDocNum', Thrift.MessageType.CALL, this.seqid());
  var args = new SearchData_getDocNum_args();
  args.indecies = indecies;
  args.types = types;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SearchDataClient.prototype.recv_getDocNum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SearchData_getDocNum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.RException) {
    return callback(result.RException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDocNum failed: unknown result');
};
SearchDataClient.prototype.queryIndecies = function(model, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryIndecies(model);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryIndecies(model);
  }
};

SearchDataClient.prototype.send_queryIndecies = function(model) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryIndecies', Thrift.MessageType.CALL, this.seqid());
  var args = new SearchData_queryIndecies_args();
  args.model = model;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SearchDataClient.prototype.recv_queryIndecies = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SearchData_queryIndecies_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.RException) {
    return callback(result.RException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryIndecies failed: unknown result');
};
SearchDataClient.prototype.getFieldMetaDataByUserIdAndType = function(userId, types, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFieldMetaDataByUserIdAndType(userId, types);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFieldMetaDataByUserIdAndType(userId, types);
  }
};

SearchDataClient.prototype.send_getFieldMetaDataByUserIdAndType = function(userId, types) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFieldMetaDataByUserIdAndType', Thrift.MessageType.CALL, this.seqid());
  var args = new SearchData_getFieldMetaDataByUserIdAndType_args();
  args.userId = userId;
  args.types = types;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SearchDataClient.prototype.recv_getFieldMetaDataByUserIdAndType = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SearchData_getFieldMetaDataByUserIdAndType_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.RException) {
    return callback(result.RException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFieldMetaDataByUserIdAndType failed: unknown result');
};
SearchDataClient.prototype.getFieldMetaDataByIndeciesAndType = function(indecies, type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFieldMetaDataByIndeciesAndType(indecies, type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFieldMetaDataByIndeciesAndType(indecies, type);
  }
};

SearchDataClient.prototype.send_getFieldMetaDataByIndeciesAndType = function(indecies, type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFieldMetaDataByIndeciesAndType', Thrift.MessageType.CALL, this.seqid());
  var args = new SearchData_getFieldMetaDataByIndeciesAndType_args();
  args.indecies = indecies;
  args.type = type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SearchDataClient.prototype.recv_getFieldMetaDataByIndeciesAndType = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SearchData_getFieldMetaDataByIndeciesAndType_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.RException) {
    return callback(result.RException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFieldMetaDataByIndeciesAndType failed: unknown result');
};
SearchDataClient.prototype.getIndexNames = function(a_from, a_to, userId, database, isProcessTime, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getIndexNames(a_from, a_to, userId, database, isProcessTime);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getIndexNames(a_from, a_to, userId, database, isProcessTime);
  }
};

SearchDataClient.prototype.send_getIndexNames = function(a_from, a_to, userId, database, isProcessTime) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getIndexNames', Thrift.MessageType.CALL, this.seqid());
  var args = new SearchData_getIndexNames_args();
  args.a_from = a_from;
  args.a_to = a_to;
  args.userId = userId;
  args.database = database;
  args.isProcessTime = isProcessTime;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SearchDataClient.prototype.recv_getIndexNames = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SearchData_getIndexNames_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.RException) {
    return callback(result.RException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getIndexNames failed: unknown result');
};
SearchDataClient.prototype.queryByDelete = function(model, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryByDelete(model);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryByDelete(model);
  }
};

SearchDataClient.prototype.send_queryByDelete = function(model) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryByDelete', Thrift.MessageType.CALL, this.seqid());
  var args = new SearchData_queryByDelete_args();
  args.model = model;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SearchDataClient.prototype.recv_queryByDelete = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SearchData_queryByDelete_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.RException) {
    return callback(result.RException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryByDelete failed: unknown result');
};
SearchDataClient.prototype.scanData = function(queryModel, scanModel, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scanData(queryModel, scanModel);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scanData(queryModel, scanModel);
  }
};

SearchDataClient.prototype.send_scanData = function(queryModel, scanModel) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scanData', Thrift.MessageType.CALL, this.seqid());
  var args = new SearchData_scanData_args();
  args.queryModel = queryModel;
  args.scanModel = scanModel;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SearchDataClient.prototype.recv_scanData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SearchData_scanData_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.RException) {
    return callback(result.RException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scanData failed: unknown result');
};
SearchDataClient.prototype.fieldStat = function(model, field, type, top, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fieldStat(model, field, type, top);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fieldStat(model, field, type, top);
  }
};

SearchDataClient.prototype.send_fieldStat = function(model, field, type, top) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('fieldStat', Thrift.MessageType.CALL, this.seqid());
  var args = new SearchData_fieldStat_args();
  args.model = model;
  args.field = field;
  args.type = type;
  args.top = top;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SearchDataClient.prototype.recv_fieldStat = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SearchData_fieldStat_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.RException) {
    return callback(result.RException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fieldStat failed: unknown result');
};
SearchDataClient.prototype.queryType = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryType(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryType(userId);
  }
};

SearchDataClient.prototype.send_queryType = function(userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryType', Thrift.MessageType.CALL, this.seqid());
  var args = new SearchData_queryType_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SearchDataClient.prototype.recv_queryType = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SearchData_queryType_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.RException) {
    return callback(result.RException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryType failed: unknown result');
};
SearchDataClient.prototype.queryByUpdate = function(queryModel, updateModel, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryByUpdate(queryModel, updateModel);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryByUpdate(queryModel, updateModel);
  }
};

SearchDataClient.prototype.send_queryByUpdate = function(queryModel, updateModel) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryByUpdate', Thrift.MessageType.CALL, this.seqid());
  var args = new SearchData_queryByUpdate_args();
  args.queryModel = queryModel;
  args.updateModel = updateModel;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SearchDataClient.prototype.recv_queryByUpdate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SearchData_queryByUpdate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.RException) {
    return callback(result.RException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryByUpdate failed: unknown result');
};
SearchDataProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
SearchDataProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

SearchDataProcessor.prototype.process_query = function(seqid, input, output) {
  var args = new SearchData_query_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.query.length === 1) {
    Q.fcall(this._handler.query, args.model)
      .then(function(result) {
        var result = new SearchData_query_result({success: result});
        output.writeMessageBegin("query", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException) {
          var result = new SearchData_query_result(err);
          output.writeMessageBegin("query", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("query", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.query(args.model, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException) {
        var result = new SearchData_query_result((err != null ? err : {success: result}));
        output.writeMessageBegin("query", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("query", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SearchDataProcessor.prototype.process_query2CSV = function(seqid, input, output) {
  var args = new SearchData_query2CSV_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.query2CSV.length === 2) {
    Q.fcall(this._handler.query2CSV, args.model, args.csvParameter)
      .then(function(result) {
        var result = new SearchData_query2CSV_result({success: result});
        output.writeMessageBegin("query2CSV", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException) {
          var result = new SearchData_query2CSV_result(err);
          output.writeMessageBegin("query2CSV", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("query2CSV", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.query2CSV(args.model, args.csvParameter, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException) {
        var result = new SearchData_query2CSV_result((err != null ? err : {success: result}));
        output.writeMessageBegin("query2CSV", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("query2CSV", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SearchDataProcessor.prototype.process_queryReport = function(seqid, input, output) {
  var args = new SearchData_queryReport_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryReport.length === 1) {
    Q.fcall(this._handler.queryReport, args.model)
      .then(function(result) {
        var result = new SearchData_queryReport_result({success: result});
        output.writeMessageBegin("queryReport", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException) {
          var result = new SearchData_queryReport_result(err);
          output.writeMessageBegin("queryReport", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("queryReport", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryReport(args.model, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException) {
        var result = new SearchData_queryReport_result((err != null ? err : {success: result}));
        output.writeMessageBegin("queryReport", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryReport", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SearchDataProcessor.prototype.process_queryReport2CSV = function(seqid, input, output) {
  var args = new SearchData_queryReport2CSV_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryReport2CSV.length === 2) {
    Q.fcall(this._handler.queryReport2CSV, args.model, args.csvParameter)
      .then(function(result) {
        var result = new SearchData_queryReport2CSV_result({success: result});
        output.writeMessageBegin("queryReport2CSV", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException) {
          var result = new SearchData_queryReport2CSV_result(err);
          output.writeMessageBegin("queryReport2CSV", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("queryReport2CSV", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryReport2CSV(args.model, args.csvParameter, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException) {
        var result = new SearchData_queryReport2CSV_result((err != null ? err : {success: result}));
        output.writeMessageBegin("queryReport2CSV", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryReport2CSV", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SearchDataProcessor.prototype.process_getDocNum = function(seqid, input, output) {
  var args = new SearchData_getDocNum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDocNum.length === 2) {
    Q.fcall(this._handler.getDocNum, args.indecies, args.types)
      .then(function(result) {
        var result = new SearchData_getDocNum_result({success: result});
        output.writeMessageBegin("getDocNum", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException) {
          var result = new SearchData_getDocNum_result(err);
          output.writeMessageBegin("getDocNum", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDocNum", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDocNum(args.indecies, args.types, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException) {
        var result = new SearchData_getDocNum_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getDocNum", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDocNum", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SearchDataProcessor.prototype.process_queryIndecies = function(seqid, input, output) {
  var args = new SearchData_queryIndecies_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryIndecies.length === 1) {
    Q.fcall(this._handler.queryIndecies, args.model)
      .then(function(result) {
        var result = new SearchData_queryIndecies_result({success: result});
        output.writeMessageBegin("queryIndecies", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException) {
          var result = new SearchData_queryIndecies_result(err);
          output.writeMessageBegin("queryIndecies", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("queryIndecies", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryIndecies(args.model, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException) {
        var result = new SearchData_queryIndecies_result((err != null ? err : {success: result}));
        output.writeMessageBegin("queryIndecies", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryIndecies", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SearchDataProcessor.prototype.process_getFieldMetaDataByUserIdAndType = function(seqid, input, output) {
  var args = new SearchData_getFieldMetaDataByUserIdAndType_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFieldMetaDataByUserIdAndType.length === 2) {
    Q.fcall(this._handler.getFieldMetaDataByUserIdAndType, args.userId, args.types)
      .then(function(result) {
        var result = new SearchData_getFieldMetaDataByUserIdAndType_result({success: result});
        output.writeMessageBegin("getFieldMetaDataByUserIdAndType", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException) {
          var result = new SearchData_getFieldMetaDataByUserIdAndType_result(err);
          output.writeMessageBegin("getFieldMetaDataByUserIdAndType", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFieldMetaDataByUserIdAndType", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFieldMetaDataByUserIdAndType(args.userId, args.types, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException) {
        var result = new SearchData_getFieldMetaDataByUserIdAndType_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getFieldMetaDataByUserIdAndType", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFieldMetaDataByUserIdAndType", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SearchDataProcessor.prototype.process_getFieldMetaDataByIndeciesAndType = function(seqid, input, output) {
  var args = new SearchData_getFieldMetaDataByIndeciesAndType_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFieldMetaDataByIndeciesAndType.length === 2) {
    Q.fcall(this._handler.getFieldMetaDataByIndeciesAndType, args.indecies, args.type)
      .then(function(result) {
        var result = new SearchData_getFieldMetaDataByIndeciesAndType_result({success: result});
        output.writeMessageBegin("getFieldMetaDataByIndeciesAndType", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException) {
          var result = new SearchData_getFieldMetaDataByIndeciesAndType_result(err);
          output.writeMessageBegin("getFieldMetaDataByIndeciesAndType", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFieldMetaDataByIndeciesAndType", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFieldMetaDataByIndeciesAndType(args.indecies, args.type, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException) {
        var result = new SearchData_getFieldMetaDataByIndeciesAndType_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getFieldMetaDataByIndeciesAndType", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFieldMetaDataByIndeciesAndType", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SearchDataProcessor.prototype.process_getIndexNames = function(seqid, input, output) {
  var args = new SearchData_getIndexNames_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getIndexNames.length === 5) {
    Q.fcall(this._handler.getIndexNames, args.a_from, args.a_to, args.userId, args.database, args.isProcessTime)
      .then(function(result) {
        var result = new SearchData_getIndexNames_result({success: result});
        output.writeMessageBegin("getIndexNames", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException) {
          var result = new SearchData_getIndexNames_result(err);
          output.writeMessageBegin("getIndexNames", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getIndexNames", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getIndexNames(args.a_from, args.a_to, args.userId, args.database, args.isProcessTime, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException) {
        var result = new SearchData_getIndexNames_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getIndexNames", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getIndexNames", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SearchDataProcessor.prototype.process_queryByDelete = function(seqid, input, output) {
  var args = new SearchData_queryByDelete_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryByDelete.length === 1) {
    Q.fcall(this._handler.queryByDelete, args.model)
      .then(function(result) {
        var result = new SearchData_queryByDelete_result({success: result});
        output.writeMessageBegin("queryByDelete", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException) {
          var result = new SearchData_queryByDelete_result(err);
          output.writeMessageBegin("queryByDelete", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("queryByDelete", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryByDelete(args.model, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException) {
        var result = new SearchData_queryByDelete_result((err != null ? err : {success: result}));
        output.writeMessageBegin("queryByDelete", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryByDelete", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SearchDataProcessor.prototype.process_scanData = function(seqid, input, output) {
  var args = new SearchData_scanData_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scanData.length === 2) {
    Q.fcall(this._handler.scanData, args.queryModel, args.scanModel)
      .then(function(result) {
        var result = new SearchData_scanData_result({success: result});
        output.writeMessageBegin("scanData", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException) {
          var result = new SearchData_scanData_result(err);
          output.writeMessageBegin("scanData", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("scanData", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scanData(args.queryModel, args.scanModel, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException) {
        var result = new SearchData_scanData_result((err != null ? err : {success: result}));
        output.writeMessageBegin("scanData", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SearchDataProcessor.prototype.process_fieldStat = function(seqid, input, output) {
  var args = new SearchData_fieldStat_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fieldStat.length === 4) {
    Q.fcall(this._handler.fieldStat, args.model, args.field, args.type, args.top)
      .then(function(result) {
        var result = new SearchData_fieldStat_result({success: result});
        output.writeMessageBegin("fieldStat", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException) {
          var result = new SearchData_fieldStat_result(err);
          output.writeMessageBegin("fieldStat", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fieldStat", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.fieldStat(args.model, args.field, args.type, args.top, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException) {
        var result = new SearchData_fieldStat_result((err != null ? err : {success: result}));
        output.writeMessageBegin("fieldStat", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fieldStat", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SearchDataProcessor.prototype.process_queryType = function(seqid, input, output) {
  var args = new SearchData_queryType_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryType.length === 1) {
    Q.fcall(this._handler.queryType, args.userId)
      .then(function(result) {
        var result = new SearchData_queryType_result({success: result});
        output.writeMessageBegin("queryType", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException) {
          var result = new SearchData_queryType_result(err);
          output.writeMessageBegin("queryType", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("queryType", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryType(args.userId, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException) {
        var result = new SearchData_queryType_result((err != null ? err : {success: result}));
        output.writeMessageBegin("queryType", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryType", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SearchDataProcessor.prototype.process_queryByUpdate = function(seqid, input, output) {
  var args = new SearchData_queryByUpdate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryByUpdate.length === 2) {
    Q.fcall(this._handler.queryByUpdate, args.queryModel, args.updateModel)
      .then(function(result) {
        var result = new SearchData_queryByUpdate_result({success: result});
        output.writeMessageBegin("queryByUpdate", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException) {
          var result = new SearchData_queryByUpdate_result(err);
          output.writeMessageBegin("queryByUpdate", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("queryByUpdate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryByUpdate(args.queryModel, args.updateModel, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException) {
        var result = new SearchData_queryByUpdate_result((err != null ? err : {success: result}));
        output.writeMessageBegin("queryByUpdate", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryByUpdate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

